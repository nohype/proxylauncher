name: Release ProxyLauncher Win64

on:
  push:
    tags:
      - "v*.*" # Trigger on tags like v1.0, v2.3, etc.

jobs:
  build-release:
    name: Build and Release
    runs-on: ubuntu-latest # Use Ubuntu runner (common and often faster)
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4 # Action to get your code

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable" # Specify your Go version (check go.mod or use 'stable')
          architecture: x64

      - name: Set up build environment variables
        run: echo "BINARY_NAME=proxylauncher" >> $GITHUB_ENV # Set binary name

      - name: Build for Windows
        run: |
          # Cross-compile for Windows (amd64)
          GOOS=windows GOARCH=amd64 go build -ldflags="-H windowsgui" -o ${{ env.BINARY_NAME }}.exe .
        env:
          # CGO_ENABLED=0 is often needed for cross-compilation if you don't have C dependencies
          CGO_ENABLED: 0

      - name: Create Release Archive
        run: |
          # Create a zip file containing the executable
          zip ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-amd64.zip ${{ env.BINARY_NAME }}.exe
        # Ensure zip utility is installed (usually present on ubuntu-latest)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # The files to upload as release assets. Accepts zip, tar.gz etc.
          files: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-amd64.zip
          # This allows the action to create releases on your behalf
          # You might need to adjust repository settings for Actions permissions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub automatically
